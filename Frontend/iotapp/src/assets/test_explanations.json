{
    "MQTT": [
      {
        "test": "Mot de passe requis",
        "explanation": "Ce test vérifie si le broker MQTT exige une authentification pour autoriser les connexions. Sans mot de passe, n'importe qui peut se connecter au broker.",
        "attack_prevented": "Connexion anonyme ou non autorisée au serveur MQTT.",
        "best_practice": "Toujours activer l’authentification par mot de passe pour les connexions MQTT. Utiliser des identifiants forts et uniques pour chaque client."
      },
      {
        "test": "Brute Force",
        "explanation": "Ce test simule une attaque par force brute pour deviner les identifiants de connexion au broker MQTT.",
        "attack_prevented": "Accès non autorisé via des identifiants faibles ou par défaut.",
        "best_practice": "Éviter les identifiants par défaut comme 'admin:admin123'. Implémenter un mécanisme de verrouillage après plusieurs tentatives échouées et utiliser des mots de passe robustes."
      },
      {
        "test": "Vulnérabilité : Publication autorisée",
        "explanation": "Ce test vérifie si un client non autorisé peut publier sur des topics MQTT, y compris des topics sensibles comme $SYS.",
        "attack_prevented": "Injection de données malveillantes ou perturbation du système par publication non autorisée.",
        "best_practice": "Configurer des ACL (Access Control Lists) pour restreindre les droits de publication selon les utilisateurs. Ne jamais permettre la publication libre sur les topics critiques."
      },
      {
        "test": "Vulnérabilité : Abonnement à un topic sensible autorisé",
        "explanation": "Ce test vérifie si un client peut s’abonner à des topics sensibles (ex : $SYS/broker) sans restriction.",
        "attack_prevented": "Fuite d’informations sensibles sur le fonctionnement interne du broker ou les autres clients connectés.",
        "best_practice": "Limiter l’abonnement aux topics critiques via des règles d’accès. Seuls les administrateurs doivent pouvoir lire les topics système."
      },
      {
        "test": "Protection flood",
        "explanation": "Ce test simule de nombreuses connexions en parallèle pour vérifier si le broker impose une limite.",
        "attack_prevented": "Déni de service (DoS) par surcharge du nombre de connexions actives.",
        "best_practice": "Mettre en place une limite de connexions par client ou par adresse IP. Activer les mécanismes anti-flood sur le broker."
      },
      {
        "test": "Reconnexion automatique",
        "explanation": "Ce test simule une perte de connexion pour vérifier si le client peut se reconnecter automatiquement au broker.",
        "attack_prevented": "Instabilité ou interruption prolongée du service MQTT après une coupure réseau.",
        "best_practice": "Configurer les clients MQTT avec des mécanismes de reconnexion automatique robustes et des délais progressifs de reconnexion."
      },
      {
        "test": "Connexion TLS",
        "explanation": "Ce test vérifie si le broker accepte les connexions sécurisées via TLS (cryptage des communications).",
        "attack_prevented": "Interception de données sensibles par attaque de type Man-In-The-Middle (MITM).",
        "best_practice": "Activer TLS/SSL sur le broker MQTT et utiliser des certificats valides pour chiffrer les échanges. Refuser les connexions non sécurisées."
      }
    ],
    "OPCUA": [
      {
        "test": "Connexion sans sécurité",
        "explanation": "Ce test vérifie si le serveur OPC UA autorise des connexions en clair, sans chiffrement ni signature des messages.",
        "attack_prevented": "Ecoute ou manipulation des messages (MITM, falsification de commandes ou de données).",
        "best_practice": "Désactiver les politiques de sécurité faibles (None). Utiliser des politiques comme Basic256Sha256 pour assurer l'intégrité et la confidentialité des échanges."
      },
      {
        "test": "Authentification anonyme autorisée",
        "explanation": "Ce test vérifie si le serveur accepte les connexions sans authentification, ce qui peut permettre un accès non contrôlé à l’infrastructure industrielle.",
        "attack_prevented": "Accès non autorisé aux variables, commandes ou structures sensibles via une session anonyme.",
        "best_practice": "Désactiver l’authentification anonyme. Exiger une authentification par certificat ou par mot de passe pour chaque client."
      },
      {
        "test": "Vérification des politiques de sécurité",
        "explanation": "Ce test analyse les politiques de sécurité activées pour détecter celles qui sont obsolètes, non sécurisées ou désactivées.",
        "attack_prevented": "Usage de protocoles faibles pouvant permettre l’usurpation, le sniffing ou la compromission de la communication.",
        "best_practice": "Activer uniquement des politiques de sécurité modernes et maintenues (ex. : Basic256Sha256). S’assurer que les clients supportent les mêmes politiques."
      },
      {
        "test": "Accès à des objets sensibles",
        "explanation": "Ce test consiste à tenter de lire ou modifier des nœuds critiques du serveur (comme ServerConfiguration ou DiagnosticNodes).",
        "attack_prevented": "Fuite d’informations sensibles ou reconfiguration malveillante du serveur OPC UA.",
        "best_practice": "Restreindre l’accès à ces objets via des ACL strictes, et isoler leur accès aux administrateurs uniquement."
      },
      {
        "test": "Appels de méthodes distantes",
        "explanation": "Ce test tente d’invoquer des méthodes distantes exposées par le serveur (ex: reboot, mise à jour firmware).",
        "attack_prevented": "Exécution de fonctions critiques par un attaquant (DoS, sabotage, contrôle à distance).",
        "best_practice": "Limiter l’exposition des méthodes critiques, authentifier rigoureusement les clients et tracer chaque appel."
      }
    ],
    "MODBUS": [
      {
        "test": "Connexion Modbus",
        "explanation": "Ce test permet de vérifier si le service Modbus est actif et répond sur le port par défaut (502).",
        "attack_prevented": "Identification de services exposés pouvant être utilisés pour des lectures ou écritures non autorisées.",
        "best_practice": "Désactiver Modbus si inutile. Si utilisé, restreindre l'accès réseau avec des ACL ou via un VPN. Monitorer les connexions actives."
      },
      {
        "test": "Lecture registre connu",
        "explanation": "Ce test tente de lire une valeur dans un registre connu afin de déterminer si des données sensibles sont accessibles.",
        "attack_prevented": "Fuite de données critiques comme des états de capteurs, des compteurs ou des statuts d’équipements.",
        "best_practice": "Limiter les droits de lecture aux seuls registres nécessaires et utiliser des proxys ou gateways filtrants si possible."
      },
      {
        "test": "Bruteforce registres",
        "explanation": "Ce test tente de lire en rafale des plages entières de registres pour découvrir des données exposées.",
        "attack_prevented": "Cartographie non autorisée du système (inventory), détection de points faibles ou préparation d’attaques ciblées.",
        "best_practice": "Restreindre l’accès aux plages critiques, appliquer un filtrage ou chiffrement via une passerelle Modbus sécurisée."
      },
      {
        "test": "Écriture registre",
        "explanation": "Ce test tente d’écrire une valeur dans un registre, simulant une tentative de sabotage ou de commande non autorisée.",
        "attack_prevented": "Altération de la configuration, sabotage d’un processus industriel ou déclenchement d’un comportement dangereux.",
        "best_practice": "Implémenter une séparation stricte des droits de lecture/écriture. Filtrer les commandes Modbus en amont via un pare-feu industriel (SCADA firewall)."
      },
      {
        "test": "Flood lecture rapide",
        "explanation": "Ce test simule une attaque par déni de service via un grand nombre de lectures en très peu de temps.",
        "attack_prevented": "Ralentissement ou indisponibilité du serveur Modbus, pouvant impacter la supervision industrielle.",
        "best_practice": "Limiter le nombre de requêtes par client via un IDS/IPS ou pare-feu. Mettre en place un contrôle de débit (rate limiting)."
      },
      {
        "test": "Accès hors plage",
        "explanation": "Ce test tente d’accéder à des adresses de registre en dehors des plages documentées.",
        "attack_prevented": "Accès à des fonctions cachées, mémoire sensible, ou déclenchement de comportements non prévus.",
        "best_practice": "Restreindre les plages autorisées, surveiller les adresses accédées, et désactiver ou filtrer les fonctions inutilisées du protocole."
      }
    ],
    "AMQP": [
      {
        "test": "SSL Activation",
        "explanation": "Ce test vérifie si la communication est chiffrée via SSL/TLS, garantissant la confidentialité et l'intégrité des échanges.",
        "attack_prevented": "Interception ou modification de messages (attaque de type Man-in-the-Middle).",
        "best_practice": "Activer SSL/TLS sur les ports AMQP. Utiliser des certificats valides et forcer les clients à l’utiliser."
      },
      {
        "test": "Port Scan",
        "explanation": "Ce test identifie les ports ouverts sur le serveur AMQP, ce qui peut révéler des interfaces accessibles non sécurisées.",
        "attack_prevented": "Découverte d’interfaces d’administration ou services mal configurés pouvant être ciblés par un attaquant.",
        "best_practice": "Fermer les ports inutiles. Restreindre l'accès aux ports critiques avec un pare-feu et du filtrage IP."
      },
      {
        "test": "Connexion Anonyme",
        "explanation": "Ce test tente de se connecter sans identifiants, simulant un accès anonyme non autorisé.",
        "attack_prevented": "Accès non authentifié au système de messagerie, permettant la lecture ou la publication de messages.",
        "best_practice": "Désactiver complètement l’authentification anonyme. Imposer l’authentification forte (login/mot de passe ou certificats)."
      },
      {
        "test": "Bruteforce Login",
        "explanation": "Ce test tente de deviner les identifiants via une attaque de force brute sur le service AMQP.",
        "attack_prevented": "Accès non autorisé à la file de messages ou aux configurations sensibles.",
        "best_practice": "Appliquer une politique de mot de passe robuste, verrouiller les comptes après plusieurs tentatives, et activer la journalisation des échecs."
      },
      {
        "test": "Accès VHost",
        "explanation": "Ce test vérifie si un utilisateur peut accéder au VHost racine (souvent le plus sensible).",
        "attack_prevented": "Accès aux files, exchanges et configurations critiques de la messagerie.",
        "best_practice": "Isoler les VHosts par rôle, limiter les droits d’accès, et utiliser un principe de moindre privilège."
      },
      {
        "test": "Interface de gestion accessible",
        "explanation": "Ce test détecte si l’interface d’administration web est accessible publiquement.",
        "attack_prevented": "Prise de contrôle via l’interface de gestion en cas d’identifiants faibles ou non changés.",
        "best_practice": "Restreindre l’accès à l’interface par IP ou VPN, et désactiver si inutile. Changer les identifiants par défaut."
      },
      {
        "test": "Publication AMQP",
        "explanation": "Ce test tente d’envoyer un message dans la file pour vérifier si l’accès en écriture est contrôlé.",
        "attack_prevented": "Injection de messages malveillants ou de spam dans les queues AMQP.",
        "best_practice": "Contrôler les droits de publication. Utiliser l’authentification, l’ACL et surveiller les files actives."
      },
      {
        "test": "Test Limitation Connexions",
        "explanation": "Ce test mesure la capacité du serveur à limiter le nombre de connexions simultanées.",
        "attack_prevented": "Déni de service (DoS) via surcharge des connexions au serveur.",
        "best_practice": "Limiter le nombre de connexions par utilisateur/IP, utiliser un reverse proxy ou un outil de contrôle de charge."
      }
    ],
    "COAP": [
      {
        "test": "Securisation route",
        "explanation": "Ce test vérifie si certaines ressources (comme /sensor-data) sont accessibles sans authentification.",
        "attack_prevented": "Accès non autorisé à des données sensibles exposées publiquement.",
        "best_practice": "Protéger toutes les routes sensibles avec une authentification. Mettre en place des ACL et contrôler l’exposition des ressources."
      },
      {
        "test": "Test PUT",
        "explanation": "Ce test tente d’écrire/modifier une ressource via une requête PUT, sans authentification.",
        "attack_prevented": "Modification non autorisée de données ou configuration via injection de commandes.",
        "best_practice": "Restreindre les méthodes PUT/POST aux utilisateurs authentifiés. Vérifier les permissions avant toute opération critique."
      },
      {
        "test": "Test POST",
        "explanation": "Vérifie si une création de ressource ou une action via POST est autorisée sans contrôle.",
        "attack_prevented": "Création illégitime de ressources ou déclenchement d’actions côté serveur.",
        "best_practice": "Limiter l’usage de POST aux cas nécessaires et sécuriser par authentification et validation d’entrée."
      },
      {
        "test": "Test DELETE",
        "explanation": "Teste si la suppression d’une ressource est possible sans restriction.",
        "attack_prevented": "Effacement non autorisé de données sur le serveur.",
        "best_practice": "Désactiver ou protéger strictement les opérations DELETE. Utiliser une vérification des droits et un journal d’audit."
      },
      {
        "test": "Observation",
        "explanation": "Teste si une ressource peut être observée (surveillée en temps réel) sans autorisation.",
        "attack_prevented": "Fuite continue d'informations sensibles ou surveillance abusive du système.",
        "best_practice": "Restreindre l’accès aux observations par authentification. Limiter les clients autorisés à observer des données critiques."
      },
      {
        "test": "Connexion CoAPS",
        "explanation": "Vérifie si le serveur accepte les connexions sécurisées via CoAPS (CoAP over DTLS).",
        "attack_prevented": "Espionnage ou modification des communications en clair.",
        "best_practice": "Activer CoAPS (port 5684) avec DTLS. Utiliser des certificats ou clés pré-partagées pour l’authentification mutuelle."
      },
      {
        "test": "Rate Limit",
        "explanation": "Ce test évalue si le serveur limite les requêtes par seconde, prévenant les abus.",
        "attack_prevented": "Déni de service ou épuisement de ressources par surcharge de requêtes.",
        "best_practice": "Mettre en œuvre une politique de limitation de débit (rate limiting) par IP ou par endpoint. Surveiller les anomalies."
      },
      {
        "test": "Payload malveillant",
        "explanation": "Vérifie si le serveur accepte des contenus malformés ou potentiellement dangereux.",
        "attack_prevented": "Injection de données corrompues pouvant entraîner un plantage ou une faille d’exécution.",
        "best_practice": "Valider systématiquement les payloads entrants. Filtrer les formats inattendus ou suspects."
      }
    ]
  }
  
  