from ScanNetwork import IOTNetworkScanner
from MQTTTests import MQTTTester
from COAPTests import CoAPTester
from OPCUATests import OPCUATester
from MODBUSTests import ModbusTester
from AMQPTests import AMQPTester

class IOTPenTest:
    def __init__(self):
        self.network_results = []
        self.modbus_results = []
        self.mqtt_results = []
        self.opcua_results = []
        self.coap_results = []
        self.amqp_results = []

    def run_network_scan(self, network, mask=None):
        if mask is not None:
            network = f'{network}/{mask}'
        # Lance le scan du réseau pour identifier les services IoT.
        self.scanner = IOTNetworkScanner(network)
        self.network_results = self.scanner.scan_network()

    def reset_results(self):
        self.mqtt_results = []
        self.modbus_results = []
        self.coap_results = []
        self.opcua_results = []
        self.amqp_results = []

    def run_pentests(self):
        if not self.network_results:
            print("Lancez d'abord le scan réseau avec run_network_scan().")
            return
        
        # Trie et exécute les pentests par protocole détecté
        for service in self.network_results:
            host = service['host']
            port = service['port']
            protocol = service['protocol'].lower()

            match protocol:
                case 'mqtt':
                    self.mqtt_tester = MQTTTester(host, port)
                    self.mqtt_results = self.mqtt_tester.run_all()
                    mqtt_score = self.calculate_score(self.mqtt_results)
                    self.mqtt_results.append({'score': mqtt_score})
                    for entry in self.mqtt_results:
                        print(entry)

                case 'modbus':
                    self.modbus_tester = ModbusTester(host, port)
                    self.modbus_results = self.modbus_tester.run_all()
                    modbus_score = self.calculate_score(self.modbus_results)
                    self.modbus_results.append({'score': modbus_score})
                    for entry in self.modbus_results:
                        print(entry)

                case 'coap':
                    self.coap_tester = CoAPTester(host, port)
                    self.coap_results = self.coap_tester.run()
                    coap_score = self.calculate_score(self.coap_results)
                    self.coap_results.append({'score': coap_score})
                    for entry in self.coap_results:
                        print(entry)

                case 'opcua':
                    self.opcua_tester = OPCUATester(host, port)
                    self.opcua_results = self.opcua_tester.run_all()
                    opcua_score = self.calculate_score(self.opcua_results)
                    self.opcua_results.append({'score': opcua_score})
                    for entry in self.opcua_results:
                        print(entry)                   

                case 'amqp':
                    self.amqp_tester = AMQPTester(host, port)
                    self.amqp_results = self.amqp_tester.run_all()
                    amqp_score = self.calculate_score(self.amqp_results)
                    self.amqp_results.append({'score': amqp_score})
                    for entry in self.amqp_results:
                        print(entry)

                case _:
                    print(f"[!] Protocole non supporté ou ignoré : {protocol} sur {host}:{port}")

    def calculate_score(self, results):
        # Compter le nombre de tests vulnérables
        total_tests = len(results)
        passed_tests = sum(1 for result in results if result['vulne'] == False)
        
        # Calculer la note sur 100
        score = (passed_tests / total_tests) * 100
        return round(score)

#iot_pentest = IOTPenTest()
#iot_pentest.run_network_scan("172.19.0.0", "24")
#iot_pentest.run_pentests()
                    
        
